{"version":3,"sources":["example-components/WidgetsDragDrop/DragDrop1/ItemTypes.js","example-components/WidgetsDragDrop/DragDrop1/Card.js","example-components/WidgetsDragDrop/DragDrop1/example.js","example-components/WidgetsDragDrop/DragDrop1/index.js","example-components/WidgetsDragDrop/DragDrop2/ItemTypes.js","example-components/WidgetsDragDrop/DragDrop2/Dustbin.js","example-components/WidgetsDragDrop/DragDrop2/Box.js","example-components/WidgetsDragDrop/DragDrop2/example.js","example-components/WidgetsDragDrop/DragDrop2/index.js","example-pages/WidgetsDragDrop/index.js"],"names":["CardDrag","React","forwardRef","ref","text","isDragging","connectDragSource","connectDropTarget","elementRef","useRef","opacity","useImperativeHandle","getNode","current","className","style","DropTarget","ItemTypes","hover","props","monitor","component","node","dragIndex","getItem","index","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","hoverClientY","getClientOffset","y","moveCard","connect","dropTarget","DragSource","beginDrag","id","dragSource","Container","useState","cards","setCards","dragCard","update","$splice","map","card","i","Card","key","LivePreviewExample","DndProvider","backend","Backend","getStyle","backgroundColor","border","minHeight","minWidth","color","padding","borderRadius","paddingTop","margin","textAlign","float","fontSize","Dustbin","greedy","isOver","isOverCurrent","children","hasDropped","setHasDropped","hasDroppedOnChild","setHasDroppedOnChild","onDrop","onChild","drop","didDrop","shallow","Button","size","Grid","container","spacing","item","lg","WidgetsDragDrop","titleHeading","titleDescription","sectionHeading"],"mappings":"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","file":"static/js/124.ef09fdc7.chunk.js","sourcesContent":["export default {\n  CARD: 'card'\n};\n","import React, { useImperativeHandle, useRef } from 'react';\nimport { DragSource, DropTarget } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\nconst CardDrag = React.forwardRef(\n  ({ text, isDragging, connectDragSource, connectDropTarget }, ref) => {\n    const elementRef = useRef(null);\n    connectDragSource(elementRef);\n    connectDropTarget(elementRef);\n    const opacity = isDragging ? 0 : 1;\n    useImperativeHandle(ref, () => ({\n      getNode: () => elementRef.current\n    }));\n    return (\n      <div\n        className=\"card card-box px-4 py-2 m-2 font-weight-bold\"\n        ref={elementRef}\n        style={{ opacity }}>\n        {text}\n      </div>\n    );\n  }\n);\nexport default DropTarget(\n  ItemTypes.CARD,\n  {\n    hover(props, monitor, component) {\n      if (!component) {\n        return null;\n      }\n      // node = HTML Div element from imperative API\n      const node = component.getNode();\n      if (!node) {\n        return null;\n      }\n      const dragIndex = monitor.getItem().index;\n      const hoverIndex = props.index;\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = node.getBoundingClientRect();\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset();\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n      // Time to actually perform the action\n      props.moveCard(dragIndex, hoverIndex);\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      monitor.getItem().index = hoverIndex;\n    }\n  },\n  (connect) => ({\n    connectDropTarget: connect.dropTarget()\n  })\n)(\n  DragSource(\n    ItemTypes.CARD,\n    {\n      beginDrag: (props) => ({\n        id: props.id,\n        index: props.index\n      })\n    },\n    (connect, monitor) => ({\n      connectDragSource: connect.dragSource(),\n      isDragging: monitor.isDragging()\n    })\n  )(CardDrag)\n);\n","import React, { useState } from 'react';\nimport CardDrag from './Card';\nimport update from 'immutability-helper';\nconst Container = () => {\n  const [cards, setCards] = useState([\n    {\n      id: 1,\n      text: 'Banana Boat'\n    },\n    {\n      id: 2,\n      text: 'Orange Juice'\n    },\n    {\n      id: 3,\n      text: 'Cuban Cigar'\n    },\n    {\n      id: 4,\n      text: 'Terrible Comedian'\n    },\n    {\n      id: 5,\n      text: 'Anxious Cab Driver'\n    },\n    {\n      id: 6,\n      text: 'Green Orange Potatoes'\n    },\n    {\n      id: 7,\n      text: 'Castles in the sky'\n    }\n  ]);\n  const moveCard = (dragIndex, hoverIndex) => {\n    const dragCard = cards[dragIndex];\n    setCards(\n      update(cards, {\n        $splice: [\n          [dragIndex, 1],\n          [hoverIndex, 0, dragCard]\n        ]\n      })\n    );\n  };\n  return (\n    <div className=\"col-md-6 my-4 p-0 mx-auto\">\n      {cards.map((card, i) => (\n        <CardDrag\n          key={card.id}\n          index={i}\n          id={card.id}\n          text={card.text}\n          moveCard={moveCard}\n        />\n      ))}\n    </div>\n  );\n};\nexport default Container;\n","import React from 'react';\n\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport Example from './example';\n\nexport default function LivePreviewExample() {\n  return (\n    <>\n      <DndProvider backend={Backend}>\n        <Example />\n      </DndProvider>\n    </>\n  );\n}\n","export default {\n  BOX: 'box'\n};\n","import React, { useState, useImperativeHandle } from 'react';\nimport { DropTarget } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\nfunction getStyle(backgroundColor) {\n  return {\n    border: '1px solid rgba(0,0,0,0.2)',\n    minHeight: '8rem',\n    minWidth: '8rem',\n    color: 'white',\n    backgroundColor,\n    padding: '2rem',\n    borderRadius: '0.5rem',\n    paddingTop: '1rem',\n    margin: '1rem',\n    textAlign: 'center',\n    float: 'left',\n    fontSize: '1rem'\n  };\n}\n\nconst Dustbin = React.forwardRef(\n  ({ greedy, isOver, isOverCurrent, connectDropTarget, children }, ref) => {\n    const [hasDropped, setHasDropped] = useState(false);\n    const [hasDroppedOnChild, setHasDroppedOnChild] = useState(false);\n    useImperativeHandle(\n      ref,\n      () => ({\n        onDrop: (onChild) => {\n          setHasDroppedOnChild(onChild);\n          setHasDropped(true);\n        }\n      }),\n      []\n    );\n    const text = greedy ? 'greedy' : 'not greedy';\n    let backgroundColor = 'rgba(60, 68, 177, 0.35)';\n    if (isOverCurrent || (isOver && greedy)) {\n      backgroundColor = '#1bc943';\n    }\n    return connectDropTarget(\n      <div style={getStyle(backgroundColor)}>\n        {text}\n        <br />\n        {hasDropped && <span>dropped {hasDroppedOnChild && ' on child'}</span>}\n        <div>{children}</div>\n      </div>\n    );\n  }\n);\nexport default DropTarget(\n  ItemTypes.BOX,\n  {\n    drop(props, monitor, component) {\n      if (!component) {\n        return;\n      }\n      const hasDroppedOnChild = monitor.didDrop();\n      if (hasDroppedOnChild && !props.greedy) {\n        return;\n      }\n      component.onDrop(hasDroppedOnChild);\n    }\n  },\n  (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    isOverCurrent: monitor.isOver({ shallow: true })\n  })\n)(Dustbin);\n","import React from 'react';\nimport { DragSource } from 'react-dnd';\nimport ItemTypes from './ItemTypes';\n\nimport { Button } from '@material-ui/core';\n\nconst Box = ({ connectDragSource }) =>\n  connectDragSource(\n    <div>\n      <Button size=\"large\" className=\"btn-warning\">\n        Drag me\n      </Button>\n    </div>\n  );\nexport default DragSource(\n  ItemTypes.BOX,\n  {\n    beginDrag: () => ({})\n  },\n  (connect) => ({\n    connectDragSource: connect.dragSource()\n  })\n)(Box);\n","import React from 'react';\nimport Dustbin from './Dustbin';\nimport { Grid } from '@material-ui/core';\nimport Box from './Box';\n\nconst Container = () => (\n  <div>\n    <div className=\"text-center\">\n      <Box />\n    </div>\n    <div className=\"divider my-4\" />\n    <Grid container spacing={6}>\n      <Grid item lg={6} className=\"d-flex justify-content-center\">\n        <Dustbin greedy={true}>\n          <Dustbin greedy={true}>\n            <Dustbin greedy={true} />\n          </Dustbin>\n        </Dustbin>\n      </Grid>\n      <Grid item lg={6} className=\"d-flex justify-content-center\">\n        <Dustbin>\n          <Dustbin>\n            <Dustbin />\n          </Dustbin>\n        </Dustbin>\n      </Grid>\n    </Grid>\n  </div>\n);\nexport default Container;\n","import React from 'react';\n\nimport { DndProvider } from 'react-dnd';\nimport Backend from 'react-dnd-html5-backend';\nimport Example from './example';\n\nexport default function LivePreviewExample() {\n  return (\n    <>\n      <DndProvider backend={Backend}>\n        <Example />\n      </DndProvider>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { PageTitle } from '../../layout-components';\n\nimport { ExampleWrapperSimple } from '../../layout-components';\n\nimport WidgetsDragDrop1 from '../../example-components/WidgetsDragDrop/DragDrop1';\nimport WidgetsDragDrop2 from '../../example-components/WidgetsDragDrop/DragDrop2';\nexport default function WidgetsDragDrop() {\n  return (\n    <>\n      <PageTitle\n        titleHeading=\"Drag & Drop\"\n        titleDescription=\"Enable draggable functionality on any DOM element. Move the draggable object by clicking on it with the mouse and dragging it anywhere within the viewport.\"\n      />\n\n      <ExampleWrapperSimple sectionHeading=\"Basic\">\n        <WidgetsDragDrop1 />\n      </ExampleWrapperSimple>\n      <ExampleWrapperSimple sectionHeading=\"Lists\">\n        <WidgetsDragDrop2 />\n      </ExampleWrapperSimple>\n    </>\n  );\n}\n"],"sourceRoot":""}