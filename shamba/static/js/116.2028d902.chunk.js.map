{"version":3,"sources":["../../../src/TimePicker/TimePickerToolbar.tsx","../../../src/TimePicker/TimePicker.tsx","example-components/FormsTimepicker/FormsTimepicker1/index.js","example-pages/FormsTimepicker/index.js"],"names":["useStyles","makeStyles","toolbarLandscape","flexWrap","toolbarAmpmLeftPadding","paddingLeft","separator","margin","cursor","hourMinuteLabel","display","justifyContent","alignItems","hourMinuteLabelAmpmLandscape","marginTop","hourMinuteLabelReverse","flexDirection","ampmSelection","marginLeft","marginRight","ampmLandscape","flexBasis","ampmSelectionWithSeconds","ampmLabel","fontSize","name","TimePickerToolbar","date","views","ampm","openView","onChange","isLandscape","setOpenView","utils","useUtils","theme","useTheme","classes","meridiemMode","getMeridiem","handleMeridiemChange","timeWithMeridiem","convertToMeridiem","mode","Boolean","useMeridiemMode","clockTypographyVariant","className","clsx","arrayIncludes","variant","onClick","ClockType","selected","label","React.createElement","disableRipple","typographyClassName","defaultProps","openTo","useOptions","props","getDefaultFormat","pick12hOr24hFormat","time24hFormat","TimePicker","makePickerWithState","Input","useState","DefaultToolbarComponent","KeyboardTimePicker","getCustomProps","refuse","LivePreviewExample","Date","selectedDate","setSelectedDate","handleDateChange","DateFnsUtils","Container","Card","id","value","KeyboardButtonProps","TextField","type","defaultValue","InputLabelProps","shrink","disabled","FormsTimepicker","titleHeading","titleDescription"],"mappings":"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","file":"static/js/116.2028d902.chunk.js","sourcesContent":["import * as React from 'react';\nimport clsx from 'clsx';\nimport ClockType from '../constants/ClockType';\nimport ToolbarText from '../_shared/ToolbarText';\nimport ToolbarButton from '../_shared/ToolbarButton';\nimport PickerToolbar from '../_shared/PickerToolbar';\nimport { arrayIncludes } from '../_helpers/utils';\nimport { useUtils } from '../_shared/hooks/useUtils';\nimport { MaterialUiPickersDate } from '../typings/date';\nimport { ToolbarComponentProps } from '../Picker/Picker';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { convertToMeridiem, getMeridiem } from '../_helpers/time-utils';\n\nexport const useStyles = makeStyles(\n  {\n    toolbarLandscape: {\n      flexWrap: 'wrap',\n    },\n    toolbarAmpmLeftPadding: {\n      paddingLeft: 50,\n    },\n    separator: {\n      margin: '0 4px 0 2px',\n      cursor: 'default',\n    },\n    hourMinuteLabel: {\n      display: 'flex',\n      justifyContent: 'flex-end',\n      alignItems: 'flex-end',\n    },\n    hourMinuteLabelAmpmLandscape: {\n      marginTop: 'auto',\n    },\n    hourMinuteLabelReverse: {\n      flexDirection: 'row-reverse',\n    },\n    ampmSelection: {\n      marginLeft: 20,\n      marginRight: -20,\n      display: 'flex',\n      flexDirection: 'column',\n    },\n    ampmLandscape: {\n      margin: '4px 0 auto',\n      flexDirection: 'row',\n      justifyContent: 'space-around',\n      flexBasis: '100%',\n    },\n    ampmSelectionWithSeconds: {\n      marginLeft: 15,\n      marginRight: 10,\n    },\n    ampmLabel: {\n      fontSize: 18,\n    },\n  },\n  { name: 'MuiPickersTimePickerToolbar' }\n);\n\nexport function useMeridiemMode(\n  date: MaterialUiPickersDate,\n  ampm: boolean | undefined,\n  onChange: (date: MaterialUiPickersDate, isFinished?: boolean | undefined) => void\n) {\n  const utils = useUtils();\n  const meridiemMode = getMeridiem(date, utils);\n\n  const handleMeridiemChange = React.useCallback(\n    (mode: 'am' | 'pm') => {\n      const timeWithMeridiem = convertToMeridiem(date, mode, Boolean(ampm), utils);\n      onChange(timeWithMeridiem, false);\n    },\n    [ampm, date, onChange, utils]\n  );\n\n  return { meridiemMode, handleMeridiemChange };\n}\n\nexport const TimePickerToolbar: React.FC<ToolbarComponentProps> = ({\n  date,\n  views,\n  ampm,\n  openView,\n  onChange,\n  isLandscape,\n  setOpenView,\n}) => {\n  const utils = useUtils();\n  const theme = useTheme();\n  const classes = useStyles();\n  const { meridiemMode, handleMeridiemChange } = useMeridiemMode(date, ampm, onChange);\n\n  const clockTypographyVariant = isLandscape ? 'h3' : 'h2';\n\n  return (\n    <PickerToolbar\n      isLandscape={isLandscape}\n      className={clsx({\n        [classes.toolbarLandscape]: isLandscape,\n        [classes.toolbarAmpmLeftPadding]: ampm && !isLandscape,\n      })}\n    >\n      <div\n        className={clsx(classes.hourMinuteLabel, {\n          [classes.hourMinuteLabelAmpmLandscape]: ampm && isLandscape,\n          [classes.hourMinuteLabelReverse]: theme.direction === 'rtl',\n        })}\n      >\n        {arrayIncludes(views, 'hours') && (\n          <ToolbarButton\n            variant={clockTypographyVariant}\n            onClick={() => setOpenView(ClockType.HOURS)}\n            selected={openView === ClockType.HOURS}\n            label={utils.getHourText(date, Boolean(ampm))}\n          />\n        )}\n\n        {arrayIncludes(views, ['hours', 'minutes']) && (\n          <ToolbarText\n            label=\":\"\n            variant={clockTypographyVariant}\n            selected={false}\n            className={classes.separator}\n          />\n        )}\n\n        {arrayIncludes(views, 'minutes') && (\n          <ToolbarButton\n            variant={clockTypographyVariant}\n            onClick={() => setOpenView(ClockType.MINUTES)}\n            selected={openView === ClockType.MINUTES}\n            label={utils.getMinuteText(date)}\n          />\n        )}\n\n        {arrayIncludes(views, ['minutes', 'seconds']) && (\n          <ToolbarText variant=\"h2\" label=\":\" selected={false} className={classes.separator} />\n        )}\n\n        {arrayIncludes(views, 'seconds') && (\n          <ToolbarButton\n            variant=\"h2\"\n            onClick={() => setOpenView(ClockType.SECONDS)}\n            selected={openView === ClockType.SECONDS}\n            label={utils.getSecondText(date)}\n          />\n        )}\n      </div>\n\n      {ampm && (\n        <div\n          className={clsx(classes.ampmSelection, {\n            [classes.ampmLandscape]: isLandscape,\n            [classes.ampmSelectionWithSeconds]: arrayIncludes(views, 'seconds'),\n          })}\n        >\n          <ToolbarButton\n            disableRipple\n            variant=\"subtitle1\"\n            selected={meridiemMode === 'am'}\n            typographyClassName={classes.ampmLabel}\n            label={utils.getMeridiemText('am')}\n            onClick={() => handleMeridiemChange('am')}\n          />\n\n          <ToolbarButton\n            disableRipple\n            variant=\"subtitle1\"\n            selected={meridiemMode === 'pm'}\n            typographyClassName={classes.ampmLabel}\n            label={utils.getMeridiemText('pm')}\n            onClick={() => handleMeridiemChange('pm')}\n          />\n        </div>\n      )}\n    </PickerToolbar>\n  );\n};\n\nexport default TimePickerToolbar;\n","import { useUtils } from '../_shared/hooks/useUtils';\nimport { TimePickerToolbar } from './TimePickerToolbar';\nimport { PureDateInput } from '../_shared/PureDateInput';\nimport { KeyboardDateInput } from '../_shared/KeyboardDateInput';\nimport { timePickerDefaultProps } from '../constants/prop-types';\nimport { usePickerState } from '../_shared/hooks/usePickerState';\nimport { pick12hOr24hFormat } from '../_helpers/text-field-helper';\nimport { useKeyboardPickerState } from '../_shared/hooks/useKeyboardPickerState';\nimport {\n  WithKeyboardInputProps,\n  makePickerWithState,\n  WithPureInputProps,\n} from '../Picker/makePickerWithState';\n\ntype TimePickerView = 'hours' | 'minutes' | 'seconds';\n\nexport interface BaseTimePickerProps {\n  /**\n   * 12h/24h view for hour selection clock\n   * @default true\n   */\n  ampm?: boolean;\n  /**\n   * Step over minutes\n   * @default 1\n   */\n  minutesStep?: number;\n}\n\nexport interface TimePickerViewsProps extends BaseTimePickerProps {\n  /** Array of views to show */\n  views?: ('hours' | 'minutes' | 'seconds')[];\n  /** First view to show in timepicker */\n  openTo?: 'hours' | 'minutes' | 'seconds';\n}\n\nexport type TimePickerProps = WithPureInputProps & TimePickerViewsProps;\n\nexport type KeyboardTimePickerProps = WithKeyboardInputProps & TimePickerViewsProps;\n\nconst defaultProps = {\n  ...timePickerDefaultProps,\n  openTo: 'hours' as TimePickerView,\n  views: ['hours', 'minutes'] as TimePickerView[],\n};\n\nfunction useOptions(props: TimePickerProps | KeyboardTimePickerProps) {\n  const utils = useUtils();\n\n  return {\n    getDefaultFormat: () =>\n      pick12hOr24hFormat(props.format, props.ampm, {\n        '12h': utils.time12hFormat,\n        '24h': utils.time24hFormat,\n      }),\n  };\n}\n\nexport const TimePicker = makePickerWithState<TimePickerProps>({\n  useOptions,\n  Input: PureDateInput,\n  useState: usePickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n});\n\nexport const KeyboardTimePicker = makePickerWithState<KeyboardTimePickerProps>({\n  useOptions,\n  Input: KeyboardDateInput,\n  useState: useKeyboardPickerState,\n  DefaultToolbarComponent: TimePickerToolbar,\n  getCustomProps: props => ({\n    refuse: props.ampm ? /[^\\dap]+/gi : /[^\\d]+/gi,\n  }),\n});\n\nTimePicker.defaultProps = defaultProps;\n\nKeyboardTimePicker.defaultProps = defaultProps;\n","import React, { useState } from 'react';\n\nimport { Container, Card, TextField } from '@material-ui/core';\n\nimport 'date-fns';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker\n} from '@material-ui/pickers';\n\nexport default function LivePreviewExample() {\n  const [selectedDate, setSelectedDate] = useState(\n    new Date('2014-08-18T21:11:54')\n  );\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date);\n  };\n\n  return (\n    <>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <Container>\n          <Card className=\"p-5 shadow-xxl\">\n            <div className=\"heading-3 text-center\">Basic</div>\n            <div className=\"d-flex justify-content-center align-items-center\">\n              <KeyboardTimePicker\n                margin=\"normal\"\n                id=\"time-picker\"\n                label=\"Time picker\"\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time'\n                }}\n              />\n            </div>\n          </Card>\n          <div className=\"divider my-4\" />\n          <Card className=\"p-5 shadow-xxl\">\n            <div className=\"heading-3 text-center\">Native</div>\n            <div className=\"d-flex justify-content-center align-items-center\">\n              <TextField\n                id=\"date\"\n                label=\"Birthday\"\n                type=\"date\"\n                defaultValue=\"2017-05-24\"\n                InputLabelProps={{\n                  shrink: true\n                }}\n              />\n            </div>\n          </Card>\n          <div className=\"divider my-4\" />\n          <Card className=\"p-5 shadow-xxl\">\n            <div className=\"heading-3 text-center\">Disabled</div>\n            <div className=\"d-flex justify-content-center align-items-center\">\n              <KeyboardTimePicker\n                disabled\n                margin=\"normal\"\n                id=\"time-picker 2\"\n                label=\"Time picker\"\n                value={selectedDate}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change time'\n                }}\n              />\n            </div>\n          </Card>\n        </Container>\n      </MuiPickersUtilsProvider>\n    </>\n  );\n}\n","import React from 'react';\n\nimport { PageTitle } from '../../layout-components';\n\nimport { ExampleWrapperSeamless } from '../../layout-components';\n\nimport FormsTimepicker1 from '../../example-components/FormsTimepicker/FormsTimepicker1';\nexport default function FormsTimepicker() {\n  return (\n    <>\n      <PageTitle\n        titleHeading=\"Timepicker\"\n        titleDescription=\"The timepicker component is a plugin that helps users easily input time entries.\"\n      />\n\n      <ExampleWrapperSeamless>\n        <FormsTimepicker1 />\n      </ExampleWrapperSeamless>\n    </>\n  );\n}\n"],"sourceRoot":""}